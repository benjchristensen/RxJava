apply plugin: 'clojure'
apply plugin: 'osgi'

dependencies {
    core project(':rxjava-core')
    provided project(':rxjava-core')
    provided project(':language-adaptors:codegen')
    compile 'org.clojure:clojure:1.4.+'
    compile 'clj-http:clj-http:0.6.4' // https://clojars.org/clj-http    
    provided 'junit:junit-dep:4.10'
    provided 'org.mockito:mockito-core:1.8.5'
}

/*
 * Clojure
 */
aotCompile = true
warnOnReflection = true

buildscript {
  repositories { maven { url "http://clojars.org/repo" } }
  dependencies { classpath "clojuresque:clojuresque:1.5.4" }
}

repositories {
  clojarsRepo()
}

/*
 * Add Counterclockwise to Eclipse
 */
eclipse {
  project {
    natures "ccw.nature"
  }
}

tasks.clojureTest { 
    classpath = classpath + configurations.provided
}

tasks.compileExamplesClojure { 
    classpath = classpath + configurations.provided
}

task createAdaptedObservable(type: JavaExec) { 
    main = 'rx.codegen.ClassPathBasedRunner'
    classpath = sourceSets.main.runtimeClasspath + configurations.provided
    args = ["Clojure", codeGenOutputDir]

    inputs.files(sourceSets.main.runtimeClasspath)
    outputs.dir(codeGenOutputDir)
}

tasks.test {
    dependsOn(createAdaptedObservable)

    //Reorders the classpath so that the newly-create Observables win
    classpath = createAdaptedObservable.outputs.files + configurations.provided + sourceSets.test.runtimeClasspath
}

tasks.jar {
    dependsOn(createAdaptedObservable)

    from (zipTree(configurations.core.singleFile)) {
        exclude "rx/Observable.class"
        exclude "rx/observables/BlockingObservable.class"
    }
    from(codeGenOutputDir)

    exclude('**/*$UnitTest*')

    manifest {
        name = 'rxjava-clojure'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
        instruction 'Fragment-Host', 'com.netflix.rxjava.core'
    }
}
